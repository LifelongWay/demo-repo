1) master(or main) branch - is generally most stable version of your code.
   It's generally the version that's public.
 
1.1) Branches outcoming from master are needed to write new features without affecting
master code. I.e you can try changing code, without affectign stable version.

1.2) If we like new feature we wrote in another branch, outcoming from master one,
	we will merge it to master branch, so NOW it WILL be affected(modified) publically.
	It's called MERGE COMMIT


## CODING


1) git branch <branchName> 
// will create branch with name <branchName> without moving to it
// will copy everything from state(commit), from which you created the branch
// so now, you can add new feature over that copied state

2) git branch -a // will show all branches (* means current branch)
3) git checkout <branchName> // will move to branch with name <branchName>
4) git branch -D <branchName> // to delete branch that's NOT MERGED

5) git checkout -b <branchName> // will create branch and checkout to it simultaneously

6) MERGING:
   to merge branch <br1> into <br2>, we have to be in branch we wanna merge into.
   in this case to merge <br1> into <br2>, we have to be in <br2>,
   then write 
   $git merge <br1> // now <br1> will be merged in to current branch(br2)

 
